function didwegt = pretrainedNetworkMain(LoadNetwork,classifyMethod)
%the code is based on the official Mathworks toolbox:
%https://ww2.mathworks.cn/help/deeplearning/examples/train-deep-learning-network-to-classify-new-images.html

addpath ./part3/pretrainednetworks/lib
addpath ./part3/pretrainednetworks/othercode
if strcmp(classifyMethod,'per image')
    imds = imageDatastore('.\part3\pretrainednetworks\data\per image\modelingdataset\', ...
        'IncludeSubfolders',true, ...
        'LabelSource','foldernames');
    [imdsTrain,imdsValidation] = splitEachLabel(imds,0.9,'randomized');
    
elseif strcmp(classifyMethod,'per protein')
    imdsTrain = imageDatastore('.\part3\pretrainednetworks\data\per protein\modelingdataset\dataTrain\',...
        'IncludeSubfolders',true ,...
        'LabelSource','foldernames');
    imdsValidation = imageDatastore('.\part3\pretrainednetworks\data\per protein\modelingdataset\dataTest\',...
        'IncludeSubfolders',true,...
        'LabelSource','foldernames');
end


% load a pretrained network, inceptionv3,resnet18.resnet50,resnet101,densenet201
switch LoadNetwork
    case 'resent18'
        net = resnet18;
    case 'resent50'
        net = resent50;
    case 'densenet201'
        net = densenet201;
    case 'googlenet'
        net = googlenet;
    case 'inceptionv3'
        net = inceptionv3;
    case 'resnet101'
        net = resnet101;
    otherwise
end

inputSize = net.Layers(1).InputSize;
if isa(net,'SeriesNetwork')
    lgraph = layerGraph(net.Layers);
else
    lgraph = layerGraph(net);
end
[learnableLayer,classLayer] = findLayersToReplace(lgraph);
numClasses = numel(categories(imdsTrain.Labels));

if isa(learnableLayer,'nnet.cnn.layer.FullyConnectedLayer')
    newLearnableLayer = fullyConnectedLayer(numClasses, ...
        'Name','new_fc', ...
        'WeightLearnRateFactor',15, ...
        'BiasLearnRateFactor',15,...
        'WeightL2Factor',8);
    
elseif isa(learnableLayer,'nnet.cnn.layer.Convolution2DLayer')
    newLearnableLayer = convolution2dLayer(1,numClasses, ...
        'Name','new_conv', ...
        'WeightLearnRateFactor',15, ...
        'BiasLearnRateFactor',15,...
        'WeightL2Factor',8);
end

lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);
layers = lgraph.Layers;
connections = lgraph.Connections;
% layers(1:10) = freezeWeights(layers(1:10));
% lgraph = createLgraphUsingConnections(layers,connections);
pixelRange = [-30 30];
scaleRange = [0.9 1.1];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange, ...
    'RandXScale',scaleRange, ...
    'RandYScale',scaleRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
    'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation);
% augimdsTest = augmentedImageDatastore(inputSize(1:2),imdsTest);
options = trainingOptions('sgdm', ...
    'MaxEpochs',10, ...
    'MiniBatchSize',50, ...
    'InitialLearnRate',2e-3, ...
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropFactor',0.5, ...
    'LearnRateDropPeriod',5, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',10, ...
    'Verbose',false, ...
    'Plots','training-progress');
net = trainNetwork(augimdsTrain,lgraph,options);
[YPred,probs] = classify(net,augimdsValidation);
YValidation = imdsValidation.Labels;

if strcmp(classifyMethod,'per image')
    save(['.\part3\pretrainednetworks\result\pretrain-model\perimage\' LoadNetwork '.mat'],...
        'YPred','YValidation','net','imdsTrain','imdsValidation','options');
elseif strcmp(classifyMethod,'per protein')
    save(['.\part3\pretrainednetworks\result\pretrain-model\perprotein\' LoadNetwork '.mat'],...
        'YPred','YValidation','net','imdsTrain','imdsValidation','options');
end
% patch classification
accuracy = mean(YPred == YValidation);
[accuracy_test,recall,precision ,F1_score] = evaluate(YPred,YValidation);

% merge_whole classification
[accuracy_whole,accuracy_test_whole,recall_whole,precision_whole ,F1_score_whole]=patch_merge_whole(imdsValidation,YValidation,YPred);

if strcmp(classifyMethod,'per image')
    save(['.\part3\pretrainednetworks\result\pretrain-model\perimage\' LoadNetwork '.mat'],...
        'YPred','YValidation','net','accuracy_test_whole',...
        'imdsTrain','imdsValidation','options','accuracy_whole',...
        'recall_whole','precision_whole','F1_score_whole');
    
elseif strcmp(classifyMethod,'per protein')
    save(['.\part3\pretrainednetworks\result\pretrain-model\perprotein\' LoadNetwork '.mat'],...
        'YPred','YValidation','net','accuracy_test_whole',...
        'imdsTrain','imdsValidation','options','accuracy_whole',...
        'recall_whole','precision_whole','F1_score_whole');
end
didwegt = 1;
